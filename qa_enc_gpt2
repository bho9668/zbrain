#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Copyright 2019 Guenter Bartsch
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#

import os
import sys
import codecs
import time
import json
import logging
import random
import re

from optparse import OptionParser
from nltools  import misc

PROC_TITLE        = 'qa_enc_gpt2'

QA_SRCFN          = 'data/qa_src'
QA_ENCFN          = 'engines/gpt-2/qa_train.txt'

MARK_ENDINFO      = '<|endinfo|>'
MARK_QUESTION     = '<|question|>'
MARK_ANSWER       = '<|answer|>'
MARK_ANSWER       = '<|answer|>'
MARK_ENDOFTEXT    = '<|endoftext|>'


#
# init
#

misc.init_app(PROC_TITLE)

#
# commandline
#

parser = OptionParser("usage: %prog [options] corpus1 [ corpus 2 ... ]")

parser.add_option ("-v", "--verbose", action="store_true", dest="verbose",
                   help="verbose output")

(options, args) = parser.parse_args()

if options.verbose:
    logging.basicConfig(level=logging.DEBUG)
else:
    logging.basicConfig(level=logging.INFO)

if len(args)==0:
    parser.print_help()
    sys.exit(1)

#
# main
#

corpora = args

cnt = 0

corpus = corpora[0]

corpus_dir = '%s/%s' % (QA_SRCFN, corpus)

datafn = 'data/qa_src/CoQA/000007698.json'

with codecs.open(QA_ENCFN, 'w', 'utf8') as encf:
    for dfn in os.listdir(corpus_dir):
        datafn = '%s/%s' % (corpus_dir, dfn)
        logging.debug(datafn)

        with codecs.open(datafn, 'r', 'utf8') as dataf:
            data = json.loads(dataf.read())

            enc_line = data['info'] + ' ' + MARK_ENDINFO

            for dlg_i, dlg_round in enumerate(data['dlg']):
                enc_line += ' ' + dlg_round['q'] + ' ' + MARK_QUESTION
                enc_line += ' ' + dlg_round['a'] + ' ' + MARK_ANSWER

            enc_line += ' ' + MARK_ENDOFTEXT

            encf.write(enc_line + '\n')

